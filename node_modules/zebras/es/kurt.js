import { curry, filter, mean, map, sum } from "ramda";
import isNumeric from "./internal/isNumeric";
import std from "./std";
/**
 * Kurtosis of a series.
 *
 * @func
 * @memberOf Z
 * @category Analysis
 * @param {Array} arr Series to calculate kurtosis for
 * @return {Number}
 * @example
 *
 * const series = [7, 2, 30, 56, 75]
 * Z.kurt(series)
 * // -2.040541067936147
 */

var kurt = curry(function (arr) {
  var filteredArr = filter(isNumeric, arr);
  var sampleStd = std(filteredArr);
  var stdFourth = Math.pow(sampleStd, 4);
  var sampleMean = mean(filteredArr);
  var diffs = map(function (x) {
    return x - sampleMean;
  }, filteredArr);
  var diffsFourth = map(function (x) {
    return Math.pow(x, 4);
  }, diffs);
  var summed = sum(diffsFourth);
  var n = filteredArr.length;
  return summed / n / stdFourth - 3;
});
export default kurt;